from aiogram import Bot, Dispatcher, executor, types, filters
import mcfq_db as db
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from background import keep_alive

TOKEN = '6388868345:AAGx6ZscZGS6aJnrCePmE3rbyh6KJUZlMF4'
GROUP_ID = -1001943459915
ADMIN_ID = 850399809
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)


#-------------ONSTART-------------#
async def on_startup(_):
  await db.db_start()
  print('Bot has started')


#-------------KEY BOARD-------------#
keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
hello_list = [
  types.KeyboardButton(text='–î–∞', callback_data='shop'),
  types.KeyboardButton(text='–î—Ä—É–≥–æ–µ', callback_data='other')
]
keyboard.add(*hello_list)

alt = types.ReplyKeyboardMarkup(resize_keyboard=True)
buttonlist = [
  types.KeyboardButton(text='–ù–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è', callback_data='loction'),
  types.KeyboardButton(text='–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π',
                       callback_data='rechme',
                       request_contact=True),
  types.KeyboardButton(text='–í–æ–ø—Ä–æ—Å/–û—Ç–≤–µ—Ç (FAQ)', callback_data='faq'),
  types.KeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
]
alt.add(*buttonlist)

yes = types.ReplyKeyboardMarkup(resize_keyboard=True)
yes_kb = [
  types.KeyboardButton(text='–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', callback_data='–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç'),
  types.KeyboardButton(text='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'),
  types.KeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
]
yes.add(*yes_kb)

admin_board = types.ReplyKeyboardMarkup(resize_keyboard=True)
adm_btn = [
  types.KeyboardButton(text='–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', callback_data='–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç'),
  types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='other'),
  types.KeyboardButton(text='–í—Å–µ –∑–∞–∫–∞–∑—ã', callback_data='other')
]
admin_board.add(*adm_btn)
#-------------CATALOG INLINE KEY BOARD-------------#
inline_catalog = types.InlineKeyboardMarkup()
type1 = types.InlineKeyboardButton(text='–ë—É–∫–µ—Ç—ã', callback_data='bouquet')
type2 = types.InlineKeyboardButton(text='–†–æ–∑—ã –æ–¥–Ω–æ–≥–æ–ª–æ–≤—ã–µ',
                                   callback_data='rosesing')
type3 = types.InlineKeyboardButton(text='–†–æ–∑—ã –∫—É—Å—Ç–æ–≤—ã–µ',
                                   callback_data='rosebush')
type4 = types.InlineKeyboardButton(text='–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã',
                                   callback_data='goldendaisy')
type5 = types.InlineKeyboardButton(text='–¢—é–ª—å–ø–∞–Ω—ã', callback_data='tulip')
type6 = types.InlineKeyboardButton(text='–≠—É—Å—Ç–æ–º–∞', callback_data='eustoma')
type7 = types.InlineKeyboardButton(text='–î—Ä—É–≥–∏–µ —Ü–≤–µ—Ç—ã',
                                   callback_data='othertypes')
inline_catalog.add(type1)
inline_catalog.row(type2)
inline_catalog.row(type3)
inline_catalog.row(type4)
inline_catalog.row(type5)
inline_catalog.row(type6)
inline_catalog.row(type7)

inline_location = types.InlineKeyboardMarkup()
location_but = types.InlineKeyboardButton(
  text='üìç',
  url=
  'https://www.google.by/maps/place/Minsk/@53.8429103,27.8469451,9z/data=!4m6!3m5!1s0x46dbcfd35b1e6ad3:0xb61b853ddb570d9!8m2!3d53.9006011!4d27.558972!16zL20vMGRseGo?entry=ttu'
)
inline_location.add(location_but)

#-------------FAQ INLINE KEY BOARD-------------#
inline_q = types.InlineKeyboardMarkup()
q1 = types.InlineKeyboardButton(text='–ö–∞–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞?',
                                callback_data='q1')
q2 = types.InlineKeyboardButton(text='–ö–∞–∫–∏–µ –≤–∏–¥—ã —É–ø–∞–∫–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã?',
                                callback_data='q2')
inline_q.add(q1)
inline_q.row(q2)


#-------------START-------------#
@dp.message_handler(commands=['start'])
async def cmd_handler(message: types.Message):
  if message.from_user.id == ADMIN_ID:
    await message.answer(
      f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{message.from_user.first_name}</b>. –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç',
      reply_markup=admin_board,
      parse_mode='html')
  else:
    await message.answer(
      f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <b>{message.from_user.first_name}</b>! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Telegram –±–æ—Ç McFlowersQueen! –Ø —Å–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º ü•∞ –•–æ—Ç–µ–ª–∏ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç?',
      reply_markup=keyboard,
      parse_mode='html')


@dp.message_handler(commands=['id'])
async def cmd_id(message: types.Message):
  await message.answer(f'{message.from_user.id}')


@dp.message_handler(filters.Text(contains='–¥–∞', ignore_case=True))
async def category_handler(message: types.Message):
  await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ü§ç', reply_markup=yes)


@dp.message_handler(filters.Text(contains='–Ω–∞–∑–∞–¥', ignore_case=True))
async def category_handler(message: types.Message):
  await message.answer(
    '–ù–µ –Ω–∞—à–ª–∏ —Ç–æ, —á—Ç–æ –∏—Å–∫–∞–ª–∏? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º —Ñ–ª–æ—Ä–∏—Å—Ç–æ–º @Trofimovich_Vika (+375 25 713 56 72) –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–¥—Ä—É–≥–æ–µ" üåø',
    reply_markup=keyboard)


@dp.message_handler(filters.Text(contains='–¥—Ä—É–≥–æ–µ', ignore_case=True))
async def category_handler(message: types.Message):
  await message.answer(
    '–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è',
    reply_markup=alt)


#-------------SHOP BUTTON-------------#
@dp.message_handler(filters.Text(contains='–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', ignore_case=True))
async def category_handler(message: types.Message):
  await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üåø: ', reply_markup=inline_catalog)


#-------------LOCATION BUTTON-------------#
@dp.message_handler(filters.Text(contains='–ª–æ–∫–∞—Ü–∏—è', ignore_case=True))
async def loc_handler(message: types.Message):
  await message.answer(text='–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞—Å —Ç—É—Ç: ',
                       reply_markup=inline_location)


#-------------REACH ME BUTTON -> SEND TO MANAGER-------------#
@dp.message_handler(content_types=['contact'])
async def forward_message(message: types.Message):
  await bot.forward_message(ADMIN_ID, message.from_user.id, message.message_id)


#-------------FAQ-------------#
@dp.message_handler(
  filters.Text(contains='–≤–æ–ø—Ä–æ—Å' or '–æ—Ç–≤–µ—Ç', ignore_case=True))
async def category_handler(message: types.Message):
  await message.answer(
    '–ü–µ—Ä–µ–¥ –í–∞–º–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Å—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å üåø: ',
    reply_markup=inline_q)


@dp.callback_query_handler(filters.Text(contains='q1'))
async def category_callback_handler(callback_query: types.CallbackQuery):
  await callback_query.message.answer(
    text=
    '<b>–ö–∞–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞?</b> \n–ë–ï–°–ü–õ–ê–¢–ù–û –ø—Ä–∏–∑–∞–∫–∞–∑–µ –æ—Ç 80—Ä (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î)\n–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –º–µ–Ω–µ–µ 80—Ä - 9—Ä\n–ë–ï–°–ü–õ–ê–¢–ù–û - —Å–∞–º–æ–≤—ã–≤–æ–∑ —Å —É–ª. –ü–æ–ª–µ–≤–∞—è, 10 (–≥. –ú–∏–Ω—Å–∫\n–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–∏–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î 2) - 15—Ä)',
    parse_mode='html')
  await callback_query.answer()


@dp.callback_query_handler(filters.Text(contains='q2'))
async def category_callback_handler(callback_query: types.CallbackQuery):
  await callback_query.message.answer(
    text=
    '<b>–ö–∞–∫–∏–µ –≤–∏–¥—ã —É–ø–∞–∫–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã?</b> \n–ö—Ä–∞—Ñ—Ç ~ 3—Ä\n–¶–≤–µ—Ç–Ω–∞—è/–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –ø–ª–µ–Ω–∫–∞ ~ 3-6—Ä\n–ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –ª–µ–Ω—Ç–∞) - 0—Ä \n*–ü—Ä–æ—Å—å–±–∞ –æ—Ç–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏ –≤–ª–∏—è–µ—Ç —Ä–∞–∑–º–µ—Ä –±—É–∫–µ—Ç–∞',
    parse_mode='html')
  await callback_query.answer()


#-------------NEW ORDER-------------#
class NewOrder(StatesGroup):
  name = State()
  phone = State()
  items = State()
  time = State()
  delivery = State()
  pay = State()
  wrap = State()


@dp.message_handler(text='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
async def add_order(message: types.Message):
  await NewOrder.name.set()
  await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ <b>–∏–º—è</b>', parse_mode='html')


@dp.message_handler(state=NewOrder.name)
async def add_order_name(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['name'] = message.text
  await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>', parse_mode='html')
  await NewOrder.next()


@dp.message_handler(state=NewOrder.phone)
async def add_order_phone(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['phone'] = message.text
  await message.answer(
    '–í–≤–µ–¥–∏—Ç–µ <b>—Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b> –∏ –∏—Ö <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>',
    parse_mode='html')
  await NewOrder.next()


@dp.message_handler(state=NewOrder.items)
async def add_order_items(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['items'] = message.text
  await message.answer(
    '–í–≤–µ–¥–∏—Ç–µ <b>–≤—Ä–µ–º—è</b> –∏ <b>–¥–∞—Ç—É</b> –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞',
    parse_mode='html')
  await NewOrder.next()


@dp.message_handler(state=NewOrder.time)
async def add_order_items(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['time'] = message.text
  await message.answer(
    '–í–≤–µ–¥–∏—Ç–µ <b>—Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏</b> \n–ë–ï–°–ü–õ–ê–¢–ù–û –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 80—Ä (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î)\n–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –º–µ–Ω–µ–µ 80—Ä - 9—Ä\n–ë–ï–°–ü–õ–ê–¢–ù–û - —Å–∞–º–æ–≤—ã–≤–æ–∑ —Å —É–ª. –ü–æ–ª–µ–≤–∞—è, 10 (–≥. –ú–∏–Ω—Å–∫\n–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–∏–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î 2) - 15—Ä)',
    parse_mode='html')
  await NewOrder.next()


@dp.message_handler(state=NewOrder.delivery)
async def add_order_items(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['delivery'] = message.text
  await message.answer(
    '–í–≤–µ–¥–∏—Ç–µ <b>—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã –æ–ø–ª–∞—Ç—ã:</b>\n–û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏',
    parse_mode='html')
  await NewOrder.next()


@dp.message_handler(state=NewOrder.pay)
async def add_order_delivery(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['pay'] = message.text
  await message.answer(
    '–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ —É–ø–∞–∫–æ–≤–∫–∏\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —É–ø–∞–∫–æ–≤–∫–∏:</b>\n–ö—Ä–∞—Ñ—Ç ~ 3—Ä\n–¶–≤–µ—Ç–Ω–∞—è/–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –ø–ª–µ–Ω–∫–∞ ~ 3-6—Ä\n–ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –ª–µ–Ω—Ç–∞) - 0—Ä \n*–ü—Ä–æ—Å—å–±–∞ –æ—Ç–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏ –≤–ª–∏—è–µ—Ç —Ä–∞–∑–º–µ—Ä –±—É–∫–µ—Ç–∞',
    parse_mode='html')
  await NewOrder.next()


@dp.message_handler(state=NewOrder.wrap)
async def add_order_delivery(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['wrap'] = message.text
  await db.add_order(state)
  db.cur.execute("SELECT * FROM items")
  rows = db.cur.fetchall()
  data = []
  for row in rows:
    rec = {}
    rec['id'] = row[0]
    rec['name'] = row[1]
    rec['phone'] = row[2]
    rec['items'] = row[3]
    rec['time'] = row[4]
    rec['delivery'] = row[5]
    rec['pay'] = row[6]
    rec['wrap'] = row[7]
    data.append(rec)
  for rec in data:
    text = f"ID: {rec['id']}\n–ò–º—è: {rec['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {rec['phone']}\n–¢–æ–≤–∞—Ä—ã: {rec['items']}\n–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {rec['time']}\n–î–æ—Å—Ç–∞–≤–∫–∞: {rec['delivery']}\n–û–ø–ª–∞—Ç–∞: {rec['pay']}\n–£–ø–∞–∫–æ–≤–∫–∞: {rec['wrap']}"
  await bot.send_message(chat_id=ADMIN_ID, text=text)
  await message.answer('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!', reply_markup=keyboard)
  await message.answer(
    '*<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ó–∞–∫–∞–∑ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–≤—è–∑–∏ —Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º',
    parse_mode='html')
  await state.finish()


@dp.message_handler(filters.Text(contains='–í—Å–µ –∑–∞–∫–∞–∑—ã', ignore_case=True))
async def handle_get_data(message: types.Message):
  db.cur.execute("SELECT * FROM items")
  rows = db.cur.fetchall()
  data = []
  for row in rows:
    rec = {}
    rec['id'] = row[0]
    rec['name'] = row[1]
    rec['phone'] = row[2]
    rec['items'] = row[3]
    rec['time'] = row[4]
    rec['delivery'] = row[5]
    rec['pay'] = row[6]
    rec['wrap'] = row[7]
    data.append(rec)
  for rec in data:
    text = f"ID: {rec['id']}\n–ò–º—è: {rec['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {rec['phone']}\n–¢–æ–≤–∞—Ä—ã: {rec['items']}\n–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {rec['time']}\n–î–æ—Å—Ç–∞–≤–∫–∞: {rec['delivery']}\n–û–ø–ª–∞—Ç–∞: {rec['pay']}\n–£–ø–∞–∫–æ–≤–∫–∞: {rec['wrap']}"
    await bot.send_message(chat_id=ADMIN_ID, text=text)


#-------------NEW GOOD-------------#
class NewGood(StatesGroup):
  good_type = State()
  good_name = State()
  good_desc = State()
  good_price = State()
  good_photo = State()


@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def add_new_good(message: types.Message):
  if message.from_user.id == ADMIN_ID:
    await NewGood.good_type.set()
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞: ',
                         reply_markup=inline_catalog)


@dp.callback_query_handler(state=NewGood.good_type)
async def add_good_type(call: types.CallbackQuery, state: FSMContext):
  async with state.proxy() as data:
    data['good_type'] = call.data
  await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
  await NewGood.next()


@dp.message_handler(state=NewGood.good_name)
async def add_good_name(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['good_name'] = message.text
  await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
  await NewGood.next()


@dp.message_handler(state=NewGood.good_desc)
async def add_good_desc(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['good_desc'] = message.text
  await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞')
  await NewGood.next()


@dp.message_handler(state=NewGood.good_price)
async def add_good_price(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['good_price'] = message.text
  await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞')
  await NewGood.next()


@dp.message_handler(lambda message: not message.photo,
                    state=NewGood.good_photo)
async def add_item_photo_check(message: types.Message):
  await message.answer('This is not an image!')


@dp.message_handler(content_types=['photo'], state=NewGood.good_photo)
async def add_good_photo(message: types.Message, state: FSMContext):
  async with state.proxy() as data:
    data['good_photo'] = message.photo[0].file_id
  await db.add_good(state)
  await message.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', reply_markup=admin_board)
  await state.finish()


@dp.callback_query_handler(filters.Text(contains='bouquet'))
async def send_ord_data(callback_query: types.CallbackQuery):
  db.cur.execute("SELECT * FROM goods WHERE good_category=?", ('bouquet', ))
  ord_rows = db.cur.fetchall()
  ord = []
  for i in ord_rows:
    record = {}
    record['i_id'] = i[0]
    record['good_name'] = i[1]
    record['good_desc'] = i[2]
    record['good_price'] = i[3]
    record['good_photo'] = i[4]
    record['good_category'] = i[5]
    ord.append(record)
  for record in ord:
    id_photo = record['good_photo']
    cap_text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {record['good_name']}\n–°–æ—Å—Ç–∞–≤/–û–ø–∏—Å–∞–Ω–∏–µ: {record['good_desc']}\n–¶–µ–Ω–∞: {record['good_price']}"
    await callback_query.message.answer_photo(photo=id_photo, caption=cap_text)
    await callback_query.answer()


@dp.callback_query_handler(filters.Text(contains='rosesing'))
async def send_ord_data(callback_query: types.CallbackQuery):
  db.cur.execute("SELECT * FROM goods WHERE good_category=?", ('rosesing', ))
  rose_rows = db.cur.fetchall()
  rose = []
  for rs in rose_rows:
    rosesing = {}
    rosesing['i_id'] = rs[0]
    rosesing['good_name'] = rs[1]
    rosesing['good_desc'] = rs[2]
    rosesing['good_price'] = rs[3]
    rosesing['good_photo'] = rs[4]
    rosesing['good_category'] = rs[5]
    rose.append(rosesing)
  for rosesing in rose:
    id_photo = rosesing['good_photo']
    cap_text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {rosesing['good_name']}\n–°–æ—Å—Ç–∞–≤/–û–ø–∏—Å–∞–Ω–∏–µ: {rosesing['good_desc']}\n–¶–µ–Ω–∞: {rosesing['good_price']}"
    await callback_query.message.answer_photo(photo=id_photo, caption=cap_text)
    await callback_query.answer()


@dp.callback_query_handler(filters.Text(contains='rosebush'))
async def send_ord_data(callback_query: types.CallbackQuery):
  db.cur.execute("SELECT * FROM goods WHERE good_category=?", ('rosebush', ))
  rose_rows = db.cur.fetchall()
  rose = []
  for rs in rose_rows:
    rosesing = {}
    rosesing['i_id'] = rs[0]
    rosesing['good_name'] = rs[1]
    rosesing['good_desc'] = rs[2]
    rosesing['good_price'] = rs[3]
    rosesing['good_photo'] = rs[4]
    rosesing['good_category'] = rs[5]
    rose.append(rosesing)
  for rosesing in rose:
    id_photo = rosesing['good_photo']
    cap_text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {rosesing['good_name']}\n–°–æ—Å—Ç–∞–≤/–û–ø–∏—Å–∞–Ω–∏–µ: {rosesing['good_desc']}\n–¶–µ–Ω–∞: {rosesing['good_price']}"
    await callback_query.message.answer_photo(photo=id_photo, caption=cap_text)
    await callback_query.answer()


@dp.callback_query_handler(filters.Text(contains='goldendaisy'))
async def send_ord_data(callback_query: types.CallbackQuery):
  db.cur.execute("SELECT * FROM goods WHERE good_category=?",
                 ('goldendaisy', ))
  ord_rows = db.cur.fetchall()
  ord = []
  for i in ord_rows:
    record = {}
    record['i_id'] = i[0]
    record['good_name'] = i[1]
    record['good_desc'] = i[2]
    record['good_price'] = i[3]
    record['good_photo'] = i[4]
    record['good_category'] = i[5]
    ord.append(record)
  for record in ord:
    id_photo = record['good_photo']
    cap_text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {record['good_name']}\n–°–æ—Å—Ç–∞–≤/–û–ø–∏—Å–∞–Ω–∏–µ: {record['good_desc']}\n–¶–µ–Ω–∞: {record['good_price']}"
    await callback_query.message.answer_photo(photo=id_photo, caption=cap_text)
    await callback_query.answer()


@dp.callback_query_handler(filters.Text(contains='tulip'))
async def send_ord_data(callback_query: types.CallbackQuery):
  db.cur.execute("SELECT * FROM goods WHERE good_category=?", ('tulip', ))
  ord_rows = db.cur.fetchall()
  ord = []
  for i in ord_rows:
    record = {}
    record['i_id'] = i[0]
    record['good_name'] = i[1]
    record['good_desc'] = i[2]
    record['good_price'] = i[3]
    record['good_photo'] = i[4]
    record['good_category'] = i[5]
    ord.append(record)
  for record in ord:
    id_photo = record['good_photo']
    cap_text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {record['good_name']}\n–°–æ—Å—Ç–∞–≤/–û–ø–∏—Å–∞–Ω–∏–µ: {record['good_desc']}\n–¶–µ–Ω–∞: {record['good_price']}"
    await callback_query.message.answer_photo(photo=id_photo, caption=cap_text)
    await callback_query.answer()


@dp.callback_query_handler(filters.Text(contains='eustoma'))
async def send_ord_data(callback_query: types.CallbackQuery):
  db.cur.execute("SELECT * FROM goods WHERE good_category=?", ('eustoma', ))
  ord_rows = db.cur.fetchall()
  ord = []
  for i in ord_rows:
    record = {}
    record['i_id'] = i[0]
    record['good_name'] = i[1]
    record['good_desc'] = i[2]
    record['good_price'] = i[3]
    record['good_photo'] = i[4]
    record['good_category'] = i[5]
    ord.append(record)
  for record in ord:
    id_photo = record['good_photo']
    cap_text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {record['good_name']}\n–°–æ—Å—Ç–∞–≤/–û–ø–∏—Å–∞–Ω–∏–µ: {record['good_desc']}\n–¶–µ–Ω–∞: {record['good_price']}"
    await callback_query.message.answer_photo(photo=id_photo, caption=cap_text)
    await callback_query.answer()


@dp.callback_query_handler(filters.Text(contains='othertypes'))
async def send_ord_data(callback_query: types.CallbackQuery):
  db.cur.execute("SELECT * FROM goods WHERE good_category=?", ('othertypes', ))
  ord_rows = db.cur.fetchall()
  ord = []
  for i in ord_rows:
    record = {}
    record['i_id'] = i[0]
    record['good_name'] = i[1]
    record['good_desc'] = i[2]
    record['good_price'] = i[3]
    record['good_photo'] = i[4]
    record['good_category'] = i[5]
    ord.append(record)
  for record in ord:
    id_photo = record['good_photo']
    cap_text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {record['good_name']}\n–°–æ—Å—Ç–∞–≤/–û–ø–∏—Å–∞–Ω–∏–µ: {record['good_desc']}\n–¶–µ–Ω–∞: {record['good_price']}"
    await callback_query.message.answer_photo(photo=id_photo, caption=cap_text)
    await callback_query.answer()


keep_alive()

if __name__ == '__main__':
  executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
